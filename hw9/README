MemcLoad

Cкрипт парсит и заливает в мемкеш поминутную выгрузку логов трекера установленных приложений.
Ключом является тип и идентификатор устройства через двоеточие, значением являет protobuf сообщение.
Примером лог-файла является sample.tsv . Файлы логов обрабатываются хронологически
(имена логов формируются из даты и времени их появления).
Скрипт memc_load.py реализует однопоточную версию, concurrency_memc_load.py многопоточный вариант
использующий модули multiprocessing, threading. Выигрыш скорости многопоточной версии примерно в 7 раза.


Ахитектура concurrency_memc_load.py

Создается пул процессов(кол-во процессов равно количеству ядер). Отдельный процесс обрабатывает один файл
в единицу времени. Внутри процесса запускается пул тредов, отдельный тред реализует загрузку данных на определеный
сервер memcache, каждому виду устройства соответствует отдельный memcache, соотвественно в рамках одного процесса
запускается 4 треда(так как 4 вида устройств). Основной поток загружает данные в соотвествующие тредам очереди, а
треды читают из своих очередей и загружают данные в memcache(по 500 записей за одно обращение). Для хронологической
обработки файлов изпользуется функция multiprocessing.Pool().imap(), она принимает на вход два аргумента: функцию
обрабатывающую один файл и отсортированный список всех файлов кооторые необходимо обработать.


Аргументы командной строки

Скрипт принимает следующие аргументы:

  -t, --test (True, False) -> если True то запускается только одна функция prototest(), проверяющая верно ли
                              сериализуются данные, по умолчанию False

  -l, --log                -> путь до файла лога, по умолчанию None, лог выводиться в stdout

  --dry      (True, False) -> если True то вместо memcache данные выводяться в stdout, по умолчанию False

  --idfa | --gaid | --adid | --dvid -> 4 аргумента соответствующие 4м видам идентификаторов мобильных
                                       операционных систем, передают адреса серверов memcache в виде
                                       строки: 'ip:port'('xxx.xxx.xxx.xxx:xxxxx'). Для каждого идентификатора
                                       отдельный сервер memcache по переданному через данные аргументы адресу
