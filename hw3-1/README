Тесты для Scoring API реализованного в hw3

В модуль api.py  была добавлена возможность хранить результаты выполнения методов в key-value хранилище, в переменной
store храниться экземпляр класса Storage. В качестве базы данных выступает redis, для написания такого функционала
использовалась python-библиотека redis. Логика общения с хранилищем и реализация класса Storage находиться в
модуле store.py. Метод online_score использует его как кэш и продолжает корректно работать при разрыве соединения,
get_interests использует store как персистентное хранилище и если со store'ом что‐то случилось может отдавать только
ошибки. Скрипты приложения (__init__.py, api.py, config_api, create_config.py, scoring.py, store.py) лежат в директории
api. Cкрипты тестов лежат в директории tests, тесты разделены на unit-тесты, functional-тесты и integration-тесты,
соотвественно директориям unit, functional и integration. Для запуска интеграционных тестов необходимо подключение
к redis-server, адрес redis-server передается через переменную окружения REDIS_HOST_API следующего вида:
"localhost:6379:0", где localhost - url сервера, 6379 - порт, 0 - номер базы. Если переменная окружения REDIS_HOST_API
не указана, то интеграционные тесты пропускаются и подключение к хранилищу не тестируется.


В конфиг были добавлены следующие опции для подключения к хранилищу:
  
     store_port - порт который "слушает" база данных(redis), значение по умолчанию: 6379
     store_url - url-адрес машины хранилища, значение по умолчанию: localhost
     number_db - номер базы на сервере, значение по умолчанию: 0
     timeout - таймаут для получения ответа от базы, значение по умолчанию: 2

Для запуска тестов необходимо:

  1. Для запуска интеграционных тестов: запущеный redis-server, адрес которого указывается в переменной окружения
     REDIS_HOST_API
  2. Исполнить команду:
     - python -m unittest discover -s tests/ --> для выполнения всех тестов
     - python -m unittest discover -s tests/unit --> для выполнения unit-тестов
     - python -m unittest discover -s tests/functional --> для выполнения functional-тестов
     - python -m unittest discover -s tests/integration --> для выполнения integration-тестов